Save Installation and Configuration
===================================

1. Prerequisites

    o Iproute2 (ip command)

    o ndsend utility
        o only needed for IPv6 failover support
        o found in vzctl-core package of OpenVZ project (openvz.org)

    o Perl and non-standard modules:
        o Net::ARP
        o Net::Arping


2. Installation

    Copy the Save executable to a directory in the default $PATH.
    Optionally, copy the man page files to the appropriate man
    directories.  For example:

        install -m 755 save /usr/local/bin/
        install -m 644 doc/save.1 /usr/local/man/man1/
        install -m 644 doc/saverc.5 /usr/local/man/man5/

    would install the executable to /usr/local/bin and the man pages
    to /usr/local/man.  It will be assumed that the man pages are
    installed throughout the remainder.  If not, these files may be
    viewed using "nroff -man doc/..."


3. Configuration

    3.1. Save configuration

        3.1.1. /etc/saverc

            This file contains an XML description of the various
            configuration parameters utilized by Save.  A skeleton for
            this file can be copied from the included template "saverc".
            See "man saverc" for a full description of its contents.

            Note that this file should be world-readable to allow
            actions such as synchronization for multiple users.

    3.2. Sysctl configuration (IPv6 only)

        3.2.1. /etc/sysctl.conf

            For IPv6 failover to work correctly, the following sysctl
            settings must be set to 0:

                net.ipv6.conf.X.dad_transmits
                net.ipv6.conf.X.accept_dad

            where X is the network interface associated with the IPv6
            failover address (equal to the value of the "device6"
            element in /etc/saverc).  For example, for a "device6"
            setting of eth0, the following sysctl settings would be
            required:

                net.ipv6.conf.eth0.dad_transmits = 0
                net.ipv6.conf.eth0.accept_dad = 0

    3.3. SSH configuration

        3.3.1. /etc/ssh/ssh_config

            If the files of a large number of non-root users need to
            be synchronized by users themselves (whether explicitly or
            implicitly embedded within other programs), it is
            recommended that host-based authentication be enabled
            between peer nodes.  This is done using an appropriate SSH
            client configuration.  For example:

                EnableSSHKeysign yes
                Host host2.example.com host2
                    HostbasedAuthentication yes

            would allow the current host to use host-based authentication
            when connecting to host2.example.com.  Note that appropriate
            configuration on the server-side is also required as discussed
            below.

            The alternative in this case is to define private SSH keys
            for all users (see "man saverc").

        3.3.2. /etc/ssh/sshd_config

            To allow other peers to connect via host-based
            authentication, it must be enabled within the SSH server:

                HostbasedAuthentication yes

            To synchronize root-owned files or to execute commands as
            root across peers, it is necessary to allow some form of
            root login.  The recommended form is to only allow forced
            commands:

                PermitRootLogin forced-commands-only

            See "man sshd_config" for other possible values.

        3.3.3. /etc/ssh/shosts.equiv

            The final piece of configuration needed to support
            host-based authentication is to add peers to the list of
            trusted remote hosts.  For example:

                host2.example.com

            would allow host2.example.com to authenticate via host-based
            authentication.

        3.3.4. /root/.ssh/authorized_keys

            If root-level operations (which includes hearbeats) are
            required with forced command root logins, an appropriate
            command must be added to the entry in root's authorized_keys
            file that corresponds to the key specified for the root user
            in the Save configuration file (see "man saverc").  This can
            be done using the --shift option (see "man save"):

                from="host2.example.com",command="/usr/local/bin/save \
                    --shift $SSH_ORIGINAL_COMMAND" ssh-rsa ...

            Note that the line join (\) is for readability only and
            should not be used in real key files.  This command would
            allow root logins from host2.example.com and allow Save to
            be executed with the first argument (which will be the
            invocation of Save in the normal case) shifted off.

            If synchronized commands are not required, it is recommended
            to add an additional --shift and the --file option, which
            disables command processing:

                from="host2.example.com",command="/usr/local/bin/save \
                    --file --shift --shift $SSH_ORIGINAL_COMMAND" ssh-rsa ...

            This prevents arbitrary commands from being executed with
            this key.  Note that this style cannot be used with
            heartbeats.


4. Activation

    The Save heartbeat mechanism must be manually configured to run
    periodically via cron or similar mechanism such as systemd timers.
    For example, to send/monitor heartbeats once a minute and reset
    the state after reboots, add the following root crontab:

        # send/monitor high availability heartbeat every minute
        * * * * * /usr/local/bin/save --heartbeat --timeout=10 >/dev/null 2>&1

        # ensure system does not come up as active
        @reboot /usr/local/bin/save --give >/dev/null 2>&1
